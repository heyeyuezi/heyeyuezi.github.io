[{"title":"NodeJs起步我都学了些什么","url":"http://example.com/2020/12/25/NodeJs起步我都学了些什么/","content":"<h1 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p><a href=\"https://blog.csdn.net/pashanhu6402/article/details/96428887\">JavaScript基本语法</a></p>\n<p><a href=\"http://nodejs.cn/api/\">NodeJs API文档</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42580403/article/details/83593024\">NodeJs 自定义函数-1</a></p>\n<p><a href=\"https://blog.csdn.net/qq_21816375/article/details/74780009?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control\">NodeJs 自定义函数-2-箭头函数</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41947857/article/details/87922620\">==和===</a></p>\n<p><a href=\"http://c.biancheng.net/view/5547.html\">JavaScript教程</a></p>\n<p><a href=\"https://blog.csdn.net/u014745069/article/details/80380448\">NodeJs var const let区分</a></p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p><a href=\"http://www.blogjava.net/zjusuyong/articles/304788.html\">http协议</a></p>\n<p><a href=\"https://blog.csdn.net/pashanhu6402/article/details/96428887\">socket原理</a></p>\n<p><a href=\"https://www.cnblogs.com/SheilaSun/p/7271883.html\">搭建静态资源服务器</a></p>\n<p><a href=\"https://www.cnblogs.com/yanhowever/p/10444591.html\">常见状态码含义</a></p>\n<p><a href=\"https://blog.csdn.net/qq_43659504/article/details/90314932\">socket通信基础实例</a></p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>Q：在网络上看几个网友贴的静态资源服务器代码，在设置文件读取根目录时，有个index.html，即使是空的也要有，它什么作用呢？</p>\n<p>A：主要是为了安全考虑，如果没有的话当外在用户到达某个目录的时候，可能可以通过相对路径的操作到达原本他直接访问不到的文件。后期对资源服务器完善之后，可能会考虑数据安全性，不让用户随便猜测就能轻易看到文件，比如你之前没有注册过这个网站就不能看文件，写别的安全功能模块，要是不符合就可以展示index.html这种文件，相当于是安全功能模块的前端展现了。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h2 id=\"静态资源服务器\"><a href=\"#静态资源服务器\" class=\"headerlink\" title=\"静态资源服务器\"></a>静态资源服务器</h2><p>此处参考的是前面学习资料中静态服务器的一篇，那位作者写的很细致，如果想要做的功能比较全可以按照指导一步一步走。我这里实现、理解、修改了主要功能代码。原代码会存在一个跑不通的情况，版本问题。</p>\n<h3 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h3><p><img src=\"/2020/12/25/NodeJs%E8%B5%B7%E6%AD%A5%E6%88%91%E9%83%BD%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/image-20201225163304564.png\" alt=\"image-20201225163304564\"></p>\n<p>config-default.json</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><h4 id=\"config-default-json\"><a href=\"#config-default-json\" class=\"headerlink\" title=\"config-default.json\"></a>config-default.json</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;port&quot;: 9696,                       本地访问端口号</span><br><span class=\"line\">    &quot;root&quot;: &quot;&#x2F;home&#x2F;lzy&quot;,                 静态资源默认访问开始的资源根目录</span><br><span class=\"line\">    &quot;indexPage&quot;: &quot;index.html&quot;            Q&amp;A谈到的indel.html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h4><p>配置安装的时候一路回车即可</p>\n<h4 id=\"app-js\"><a href=\"#app-js\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const StaticServer &#x3D; require(&#39;.&#x2F;static-server&#39;);      引用再写的功能模块</span><br><span class=\"line\">(new StaticServer()).start();                         </span><br><span class=\"line\">这个文件就只是负责启动，但是做到了很好的封装</span><br></pre></td></tr></table></figure>\n<h4 id=\"static-server-js\"><a href=\"#static-server-js\" class=\"headerlink\" title=\"static-server.js\"></a>static-server.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">const path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class=\"line\">const url &#x3D; require(&#39;url&#39;);</span><br><span class=\"line\">const mime &#x3D; require(&#39;.&#x2F;mime&#39;);</span><br><span class=\"line\">const config &#x3D; require(&#39;.&#x2F;config&#x2F;default&#39;);</span><br><span class=\"line\">这些是引用模块</span><br><span class=\"line\"></span><br><span class=\"line\">class StaticServer &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.port &#x3D; config.port;</span><br><span class=\"line\">        this.root &#x3D; config.root;</span><br><span class=\"line\">        this.indexPage &#x3D; config.indexPage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    respondNotFound(req, res) &#123;</span><br><span class=\"line\">        res.writeHead(404, &#123;</span><br><span class=\"line\">            &#39;Content-Type&#39;: &#39;text&#x2F;html&#39;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        res.end(&#96;&lt;h1&gt;Not Found&lt;&#x2F;h1&gt;&lt;p&gt;The requested URL $&#123;req.url&#125; was not found on this server.&lt;&#x2F;p&gt;&#96;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    respondFile(pathName, req, res) &#123;</span><br><span class=\"line\">        const readStream &#x3D; fs.createReadStream(pathName);</span><br><span class=\"line\">        res.setHeader(&#39;Content-Type&#39;,mime.lookup(pathName));</span><br><span class=\"line\">        readStream.pipe(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    respondDirectory(pathName, req, res) &#123;</span><br><span class=\"line\">        const indexPagePath &#x3D; path.join(pathName, this.indexPage);</span><br><span class=\"line\">        &#x2F;&#x2F;fs.existsSync(path)</span><br><span class=\"line\">        &#x2F;&#x2F;如果路径存在，则返回 true，否则返回 false。</span><br><span class=\"line\">        if (fs.existsSync(indexPagePath)) &#123;</span><br><span class=\"line\">            this.respondFile(indexPagePath, req, res);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;fs.readdir(path[, options], callback)#</span><br><span class=\"line\">            &#x2F;&#x2F;读取目录的内容。</span><br><span class=\"line\">            &#x2F;&#x2F;回调有两个参数 (err, files)</span><br><span class=\"line\">            &#x2F;&#x2F;其中 files 是目录中文件的名称的数组（不包括 &#39;.&#39; 和 &#39;..&#39;）</span><br><span class=\"line\">            fs.readdir(pathName, (err, files) &#x3D;&gt; &#123;</span><br><span class=\"line\">                if (err) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;内部服务器错误</span><br><span class=\"line\">                    res.writeHead(500);</span><br><span class=\"line\">                    return res.end(err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                const requestPath &#x3D; url.parse(req.url).pathname;</span><br><span class=\"line\">                let content &#x3D; &#96;&lt;h1&gt;Index of $&#123;requestPath&#125;&lt;&#x2F;h1&gt;&#96;;</span><br><span class=\"line\">                files.forEach(file &#x3D;&gt; &#123;</span><br><span class=\"line\">                    let itemLink &#x3D; path.join(requestPath,file);               </span><br><span class=\"line\">                    content +&#x3D; &#96;&lt;p&gt;&lt;a href&#x3D;&#39;$&#123;itemLink&#125;&#39;&gt;$&#123;file&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&#96;;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                &#x2F;&#x2F;成功接收</span><br><span class=\"line\">                res.writeHead(200, &#123;</span><br><span class=\"line\">                    &#39;Content-Type&#39;: &#39;text&#x2F;html&#39;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                res.end(content);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    routeHandler(pathName, req, res) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;检查给定路径的文件属性</span><br><span class=\"line\">        &#x2F;&#x2F;fs.stat(path[, options], callback)</span><br><span class=\"line\">        &#x2F;&#x2F;fs.stat(pathsToCheck[i], function(err, stats)</span><br><span class=\"line\">        fs.stat(pathName, (err, stat) &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (!err) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;path.parse(path) 返回一个对象</span><br><span class=\"line\">                const requestedPath &#x3D; url.parse(req.url).pathName;</span><br><span class=\"line\">                if(stat.isDirectory())&#123;</span><br><span class=\"line\">                  this.respondDirectory(pathName,req, res);</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                  this.respondFile(pathName,req, res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                this.respondNotFound(req, res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;</span><br><span class=\"line\">        http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">            const pathName &#x3D; path.join(this.root, path.normalize(req.url));</span><br><span class=\"line\">            this.routeHandler(pathName,req,res);</span><br><span class=\"line\">        &#125;).listen(this.port, err &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (err) &#123;</span><br><span class=\"line\">                console.error(err);</span><br><span class=\"line\">                console.info(&#39;Failed to start server&#39;);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                console.info(&#96;Server started on port $&#123;this.port&#125;&#96;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; StaticServer;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mime-js\"><a href=\"#mime-js\" class=\"headerlink\" title=\"mime.js\"></a>mime.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">const mimeTypes &#x3D; &#123;</span><br><span class=\"line\">    &quot;css&quot;: &quot;text&#x2F;css&quot;,</span><br><span class=\"line\">    &quot;gif&quot;: &quot;image&#x2F;gif&quot;,</span><br><span class=\"line\">    &quot;html&quot;: &quot;text&#x2F;html&quot;,</span><br><span class=\"line\">    &quot;ico&quot;: &quot;image&#x2F;x-icon&quot;,</span><br><span class=\"line\">    &quot;jpeg&quot;: &quot;image&#x2F;jpeg&quot;,</span><br><span class=\"line\">    &quot;jpg&quot;: &quot;image&#x2F;jpeg&quot;,</span><br><span class=\"line\">    &quot;js&quot;: &quot;text&#x2F;javascript&quot;,</span><br><span class=\"line\">    &quot;json&quot;: &quot;application&#x2F;json&quot;,</span><br><span class=\"line\">    &quot;pdf&quot;: &quot;application&#x2F;pdf&quot;,</span><br><span class=\"line\">    &quot;png&quot;: &quot;image&#x2F;png&quot;,</span><br><span class=\"line\">    &quot;svg&quot;: &quot;image&#x2F;svg+xml&quot;,</span><br><span class=\"line\">    &quot;swf&quot;: &quot;application&#x2F;x-shockwave-flash&quot;,</span><br><span class=\"line\">    &quot;tiff&quot;: &quot;image&#x2F;tiff&quot;,</span><br><span class=\"line\">    &quot;txt&quot;: &quot;text&#x2F;plain&quot;,</span><br><span class=\"line\">    &quot;wav&quot;: &quot;audio&#x2F;x-wav&quot;,</span><br><span class=\"line\">    &quot;wma&quot;: &quot;audio&#x2F;x-ms-wma&quot;,</span><br><span class=\"line\">    &quot;wmv&quot;: &quot;video&#x2F;x-ms-wmv&quot;,</span><br><span class=\"line\">    &quot;xml&quot;: &quot;text&#x2F;xml&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const lookup &#x3D; (pathName) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let ext &#x3D; path.extname(pathName);</span><br><span class=\"line\">    ext &#x3D; ext.split(&#39;.&#39;).pop();</span><br><span class=\"line\">    return mimeTypes[ext] || mimeTypes[&#39;txt&#39;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    lookup</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单聊天室\"><a href=\"#简单聊天室\" class=\"headerlink\" title=\"简单聊天室\"></a>简单聊天室</h2><h4 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const net &#x3D; require(&#39;net&#39;);</span><br><span class=\"line\">const port &#x3D; 8000;</span><br><span class=\"line\">const hostname &#x3D; &#39;127.0.0.1&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义两个变量， 一个用来计数，一个用来保存客户端</span><br><span class=\"line\">let clients &#x3D; &#123;&#125;;</span><br><span class=\"line\">let clientName &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建服务器</span><br><span class=\"line\">const server &#x3D; new net.createServer();</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(&#39;connection&#39;, (client) &#x3D;&gt; &#123;</span><br><span class=\"line\">  client.name &#x3D; clientName++; &#x2F;&#x2F; 给每一个client起个名</span><br><span class=\"line\">  clients[client.name]&#x3D; client; &#x2F;&#x2F; 将client保存在clients</span><br><span class=\"line\">  clients[client.name].keys &#x3D; client.name;</span><br><span class=\"line\">  clients[client.name].values &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;for(var i&#x3D;0;i&lt;clientName;i++)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(clients[i].keys);</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(clients[i].values);</span><br><span class=\"line\">  &#x2F;&#x2F;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  client.on(&#39;data&#39;, function (msg) &#123; &#x2F;&#x2F;接收client发来的信息</span><br><span class=\"line\">    console.log(&#96;客户端$&#123;client.name&#125;发来一个信息：$&#123;msg&#125;&#96;);</span><br><span class=\"line\">    for(var i&#x3D;0;i&lt;clientName;i++)&#123;</span><br><span class=\"line\">      if(clients[i].values)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        clients[i].write(&#96;客户端$&#123;client.name&#125;发来一个信息：$&#123;msg&#125;&#96;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  client.on(&#39;error&#39;, function (e) &#123; &#x2F;&#x2F;监听客户端异常</span><br><span class=\"line\">    console.log(&#39;client error&#39; + e);</span><br><span class=\"line\">    client.end();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  client.on( &#39;close&#39;, function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;delete clients[client.name];</span><br><span class=\"line\">    console.log(&#96;客户端$&#123; client.name &#125;下线了！&#96;);</span><br><span class=\"line\">    for(var i&#x3D;0;i&lt;clientName;i++)&#123;</span><br><span class=\"line\">      if(clients[i].values)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        clients[i].write(&#96;客户端$&#123; client.name &#125;下线了！&#96;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port,hostname,function () &#123;</span><br><span class=\"line\">  console.log(&#96;服务器运行在：http:&#x2F;&#x2F;$&#123;hostname&#125;:$&#123;port&#125;&#96;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const net &#x3D; require(&#39;net&#39;);</span><br><span class=\"line\">const socket &#x3D; new net.Socket();</span><br><span class=\"line\">const port &#x3D; 8000;</span><br><span class=\"line\">const hostname &#x3D; &#39;127.0.0.1&#39;;</span><br><span class=\"line\">socket.setEncoding &#x3D; &#39;UTF-8&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">socket.connect( port,hostname,function()&#123;</span><br><span class=\"line\">  socket.write(&#39;hello 大家好~&#39;);</span><br><span class=\"line\">  console.log(&#39;我加入群聊啦~&#39;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  process.stdin.setEncoding(&#39;utf8&#39;);</span><br><span class=\"line\">  process.stdin.on(&#39;readable&#39;,function()&#123;</span><br><span class=\"line\">    process.stdin.resume();</span><br><span class=\"line\">    var str&#x3D;process.stdin.read();</span><br><span class=\"line\">    if(str !&#x3D;&#x3D; null)&#123;</span><br><span class=\"line\">      socket.write(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">socket.on(&#39;data&#39;,function(msg) &#123;</span><br><span class=\"line\">  console.log(msg.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">socket.on(&#39;error&#39;,function(error) &#123;</span><br><span class=\"line\">  console.log(&#39;error&#39;+error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">socket.on(&#39;close&#39;,function()&#123;</span><br><span class=\"line\">  console.log(&#39;服务器端下线了&#39;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["编程语言"],"tags":["编程语言","node.js"]},{"title":"python起步我都学了些什么","url":"http://example.com/2020/12/25/python起步我都学了些什么/","content":"<h1 id=\"基础学习\"><a href=\"#基础学习\" class=\"headerlink\" title=\"基础学习\"></a>基础学习</h1><p><strong><a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400\">重要学习资料：廖雪峰老师的python教程</a></strong></p>\n<h2 id=\"语言特点\"><a href=\"#语言特点\" class=\"headerlink\" title=\"语言特点\"></a>语言特点</h2><p>C语言适合开发那些追求运行速度、充分发挥硬件性能的程序。</p>\n<p>而Python是用来编写应用程序的高级编程语言。</p>\n<p>提供一个比较完善的基础代码库，让你能直接调用（内置库）<br>大量的第三方库，也就是别人开发的，供你直接使用的东西。（第三方库）</p>\n<p>龟叔给Python的定位是“优雅”、“明确”、“简单”：Python的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。</p>\n<h2 id=\"Python适合开发哪些类型的应用呢？\"><a href=\"#Python适合开发哪些类型的应用呢？\" class=\"headerlink\" title=\"Python适合开发哪些类型的应用呢？\"></a>Python适合开发哪些类型的应用呢？</h2><p>首选是网络应用，包括网站、后台服务等等；<br>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；<br>另外就是把其他语言开发的程序再包装起来，方便使用。</p>\n<h2 id=\"一些细节\"><a href=\"#一些细节\" class=\"headerlink\" title=\"一些细节\"></a>一些细节</h2><p>exit()<br>print(‘string1’,’string2’,int) 遇到，输出空格<br>input(‘提示信息’)<br>#注释</p>\n<p>#!/usr/bin/env python3<br>chmod a+x hello.py<br>在Windows上是不行的，但是，在Mac和Linux上是可以直接运行</p>\n<p>用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！</p>\n<p>编译器或者解释器就是负责把符合语法的程序代码转换成CPU能够执行的机器码</p>\n<h2 id=\"缩进语法风格-大小写敏感\"><a href=\"#缩进语法风格-大小写敏感\" class=\"headerlink\" title=\"缩进语法风格/大小写敏感\"></a>缩进语法风格/大小写敏感</h2><p>优点：</p>\n<p>1.格式化代码-按照约定俗成的惯例，应该始终坚持使用**<em>4个空格**</em>的缩进。<br>​2.强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数<br>缺点：</p>\n<p>“复制－粘贴”功能失效了。粘贴过去的代码必须重新检查缩进是否正确。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"1-整数：\"><a href=\"#1-整数：\" class=\"headerlink\" title=\"1.整数：\"></a>1.整数：</h3><p> 10进制<br>+16进制 0x<br>+允许在数字中间以_分隔(好看)<br>​    10_000_000_000 = 10000000000<br>​     0xa1b2_c3d4 = 0xa1b2c3d4</p>\n<h3 id=\"2-浮点数\"><a href=\"#2-浮点数\" class=\"headerlink\" title=\"2.浮点数\"></a>2.浮点数</h3><p>  对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8<br>  整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（包括除法），而浮点数运算则可能会有四舍五入的误差。</p>\n<h3 id=\"3-字符串\"><a href=\"#3-字符串\" class=\"headerlink\" title=\"3.字符串\"></a>3.字符串</h3><p>  “”&gt;’’ ： “”里面含有‘’可以解释<br>  转义字符\\ ： 字符串内部既包含’又包含”<br>              ‘I&#39;m &quot;OK&quot;!’=I’m “OK”!<br>              转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是\\转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是<br>  用r’’表示’’内部的字符串默认不转义<br>           print(r’\\\\t\\‘) = \\\\t\\<br>  用’’’…’’’的格式表示多行内容<br>           &gt;&gt;&gt; print(‘’’line1<br>           … line2<br>           … line3’’’)</p>\n<h3 id=\"4-布尔值\"><a href=\"#4-布尔值\" class=\"headerlink\" title=\"4.布尔值\"></a>4.布尔值</h3><p>  True False(大小写敏感)<br>  and or not</p>\n<h3 id=\"5-空值None\"><a href=\"#5-空值None\" class=\"headerlink\" title=\"5.空值None\"></a>5.空值None</h3><p>  0是有意义的，而None是一个特殊的空值<br>列表、字典等多种数据类型，还允许创建自定义数据类型…</p>\n<h3 id=\"6-list-有序列表-可变\"><a href=\"#6-list-有序列表-可变\" class=\"headerlink\" title=\"6.list-有序列表[]/可变\"></a>6.list-有序列表[]/可变</h3><p>变量=[ , , …]<br>len(变量)=个数<br>[0开始]<br>[-x倒数第x个]<br>变量.append(元素) list末尾追加<br>变量.insert(索引号，元素)<br>变量.pop()删除末尾<br>变量.pop(索引号)<br>list里面的元素的数据类型也可以不同，list元素也可以是另一个list<br>L=[] 空list</p>\n<h3 id=\"7-tuple-有序列表-不可变\"><a href=\"#7-tuple-有序列表-不可变\" class=\"headerlink\" title=\"7.tuple-有序列表()/不可变\"></a>7.tuple-有序列表()/不可变</h3><p>tuple和list非常类似，但是tuple一旦初始化就不能修改<br>它没有append()，insert()这样的方法。其他获取元素的方法和list是一样的<br>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。<br>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来<br>可以定义一个空的tuple<br>可以为空 t = ()<br>Python在显示只有1个元素的tuple时，也会加一个逗号 定义也是t = (1,)<br>===可变的”tuple<br>t = (‘a’, ‘b’, [‘A’, ‘B’])<br>t[2][0] = ‘X’<br>t[2][1] = ‘Y’<br>(‘a’, ‘b’, [‘X’, ‘Y’])<br>实质还是不变的！指向不变！<br><a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880</a></p>\n<h3 id=\"8-字典dict-map\"><a href=\"#8-字典dict-map\" class=\"headerlink\" title=\"8.字典dict(map)\"></a>8.字典dict(map)</h3><p>使用键-值（key-value）存储，具有极快的查找速度。<br>d = {‘Michael’: 95, ‘Bob’: 75, ‘Tracy’: 85}<br>d[‘Michael’]<br>95<br>原理：先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。<br>‘Michael’，dict在内部就可以直接计算出Michael对应的存放成绩的“页码”，也就是95这个数字存放的内存地址，直接取出来，所以速度非常快。<br>d[‘Adam’] = 67</p>\n<h4 id=\"—要避免key不存在的错误：\"><a href=\"#—要避免key不存在的错误：\" class=\"headerlink\" title=\"—要避免key不存在的错误：\"></a>—要避免key不存在的错误：</h4><p>1.通过in判断key是否存在<br>‘Thomas’ in d<br>False<br>2.通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：<br>d.get(‘Thomas’) 返回None的时候Python的交互环境不显示结果。<br>d.get(‘Thomas’, -1)<br>-1<br>删除一个key，用pop(key)方法，对应的value也会从dict中删除</p>\n<h4 id=\"—dict有以下几个特点：（dict是用空间来换取时间的一种方法）\"><a href=\"#—dict有以下几个特点：（dict是用空间来换取时间的一种方法）\" class=\"headerlink\" title=\"—dict有以下几个特点：（dict是用空间来换取时间的一种方法）\"></a>—dict有以下几个特点：（dict是用空间来换取时间的一种方法）</h4><p>1.查找和插入的速度极快，不会随着key的增加而变慢；<br>2.需要占用大量的内存，内存浪费多。<br>list相反：<br>1.查找和插入的时间随着元素的增加而增加；<br>2.占用空间小，浪费内存很少。</p>\n<h4 id=\"—-dict\"><a href=\"#—-dict\" class=\"headerlink\" title=\"—-dict\"></a>—-dict</h4><p>1.dict的key必须是不可变对象。<br>通过key计算位置的算法称为哈希算法<br>最常用的key是字符串</p>\n<h3 id=\"9-set\"><a href=\"#9-set\" class=\"headerlink\" title=\"9.set\"></a>9.set</h3><p>一组key的集合，但不存储value。key不能重复<br>数学意义上的无序和无重复元素的集合</p>\n<p>对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>1.变量名必须是大小写英文、数字和_的组合，且不能用数字开头<br>2.同一个变量可以反复赋值，而且可以是不同类型的变量<br><strong>[动态语言]</strong><br>{变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言。}<br>3.变量在内存的表示<br>    1.a=’ABC’<br>      Python解释器干了两件事情：<br>      在内存中创建了一个’ABC’的字符串；<br>      在内存中创建了一个名为a的变量，并把它指向’ABC’<br>    2.b=a<br>      把变量b指向变量a所指向的数据</p>\n<p><img src=\"/2020/12/25/python%E8%B5%B7%E6%AD%A5%E6%88%91%E9%83%BD%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/python1.png\"></p>\n<p>对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。</p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>通常用全部大写的变量名表示常量<br>Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。<br>Python的整数没有大小限制<br>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf</p>\n<h2 id=\"除法\"><a href=\"#除法\" class=\"headerlink\" title=\"除法\"></a>除法</h2><p>/ 结果永远小数 9/3=3.0<br>// 取整数部分 结果永远整数<br>% 结果永远整数</p>\n<h2 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h2><p>1-ASCII、Unicode和UTF-8的关系<br>不同国家不同编码-&gt;乱码-&gt;Unicode把所有语言都统一到一套编码里<br>(ASCII编码是1个字节，而Unicode编码通常是2个字节。<br>最常用的是UCS-16编码，用两个字节表示一个字符)<br>-&gt;如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。<br>-&gt;”可变长编码”的UTF-8编码<br>(UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。)<br>(ASCII编码实际上可以被看成是UTF-8编码的一部分)<br>2-现在计算机系统通用的字符编码工作方式<br>(1)在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。<br>(2)用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件<br>(3)浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器</p>\n<h2 id=\"python的字符串\"><a href=\"#python的字符串\" class=\"headerlink\" title=\"python的字符串\"></a>python的字符串</h2><p>Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言<br>当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。+必须并且要确保文本编辑器正在使用UTF-8 without BOM编码<br><a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896</a><br>当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8</p>\n<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2><p>1.<br>‘Hi, %s, you have $%d.’ % (‘Michael’, 1000000)<br>‘Hi, Michael, you have $1000000.’<br>%d    整数<br>%f    浮点数<br>%s    字符串<br>%x    十六进制整数<br>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：<br>字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%<br>2.<br>format()<br>‘Hello, {0}, 成绩提升了 {1:.1f}%’.format(‘小明’, 17.125)<br>‘Hello, 小明, 成绩提升了 17.1%’<br>3.<br>f-string<br>print(f’The area of a circle with radius {r} is {s:.2f}’)<br>The area of a circle with radius 2.5 is 19.62</p>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><p>if    :<br>elif   :<br>else   :<br>只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。<br>input()返回的数据类型是str<br>int()函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>1.for<br>for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句<br>range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。<br>比如range(5)生成的序列是从0开始小于5的整数：<br>list(range(5))        [0, 1, 2, 3, 4]<br>2.while</p>\n<h1 id=\"动手实践：凯撒密码\"><a href=\"#动手实践：凯撒密码\" class=\"headerlink\" title=\"动手实践：凯撒密码\"></a>动手实践：凯撒密码</h1><h2 id=\"工程说明\"><a href=\"#工程说明\" class=\"headerlink\" title=\"工程说明\"></a>工程说明</h2><p>情报原文.txt ：支持文本读入</p>\n<p>情报密文.txt：支持写入文本</p>\n<p>本地词典.txt：情景代入，拦截敌军情报，不知对方移动位数，但可猜测关键词汇，那么将关键词输入整理为本地词典，以供参考验证破解的正确性，最后返还给用户正确性最高的破译</p>\n<p>凯撒密码.py</p>\n<p>四个文件放在同一目录下</p>\n<h2 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h2><p><code>def jiaMi(words, num):     i = 0     lenth = len(words)     dealt_list = list()     while(i &lt; lenth):         #A-Z         if(ord(words[i])&gt;=65 and ord(words[i])&lt;=90):             if(ord(words[i])+num&gt;90):                 dealt_list.append(chr(ord(words[i])+num-90+64))             else:                 dealt_list.append(chr(ord(words[i])+num))         #a-z         elif(ord(words[i])&gt;=97 and ord(words[i])&lt;=122):             if(ord(words[i])+num&gt;122):                 dealt_list.append(chr(ord(words[i])+num-122+96))             else:                 dealt_list.append(chr(ord(words[i])+num))         #其它 符号+数字 不变         else:             dealt_list.append(words[i])         i = i+1     dealt = &quot;&quot;.join(dealt_list)     return dealt</code></p>\n<p><code>def jieMi_with(words, num):     i = 0     lenth = len(words)     dealt_list = list()     while(i &lt; lenth):         #A-Z         if(ord(words[i])&gt;=65 and ord(words[i])&lt;=90):             if(ord(words[i])-num&lt;65):                 dealt_list.append(chr(91-(num-(ord(words[i])-65))))             else:                 dealt_list.append(chr(ord(words[i])-num))         #a-z         elif(ord(words[i])&gt;=97 and ord(words[i])&lt;=122):             if(ord(words[i])-num&lt;97):                 dealt_list.append(chr(123-(num-(ord(words[i])-97))))             else:                 dealt_list.append(chr(ord(words[i])-num))         #其它 符号+数字 不变         else:             dealt_list.append(words[i])         i = i+1     dealt = &quot;&quot;.join(dealt_list)     return dealt</code>    </p>\n<p><code>def jieMi_without(words):     i = 1     flag = True     while(flag):         x = jieMi_with(words,i)         file1 = open(&quot;本地词典.txt&quot;)         for line in file1.readlines():             line=line.strip(&#39;\\n&#39;)             if line in x:                 flag = False                 break         if(flag == False):             return x         else:             i=i+1</code></p>\n<p><code>while True:     print(&quot;现提供以下功能：&quot;)     print(&quot;1.数据加密&quot;)     print(&quot;2.已知位移的数据解密&quot;)     print(&quot;3.不知位移的数据解密&quot;)     print(&quot;4.退出程序&quot;)     x = int(input(&quot;你想选择的功能是：&quot;))     if(x == 1):         print(&quot;选择待加密信息来源：&quot;)         print(&quot;1.终端输入&quot;)         print(&quot;2.文本读入&quot;)         y = int(input(&quot;你想选择的功能是：&quot;))         if(y == 1):             words1 = input(&quot;请输入待加密字符串：&quot;)         else:             with open(&#39;情报原文.txt&#39;) as file_obj:                 words1 = file_obj.read()                 print(words1)                 file_obj.close()         num1 = int(input(&quot;请输入待加密的位移：&quot;))         if (y == 2):             file_handle=open(&#39;情报密文.txt&#39;,mode=&#39;w&#39;)             file_handle.write(jiaMi(words1, num1))             file_handle.close()             print(&quot;情报原文已保存在文档中&quot;)         print(&quot;数据加密结果为:&quot;)         print(jiaMi(words1, num1))     elif(x == 2):         print(&quot;选择待解密信息来源：&quot;)         print(&quot;1.终端输入&quot;)         print(&quot;2.文本读入&quot;)         y = int(input(&quot;你想选择的功能是：&quot;))         if(y == 1):             words2 = input(&quot;请输入待解密字符串：&quot;)         else:             with open(&#39;情报密文.txt&#39;) as file_obj:                 words2 = file_obj.read()                 print(words2)                 file_obj.close()         num2 = int(input(&quot;请输入待解密的位移：&quot;))         if (y == 2):             file_handle=open(&#39;情报原文.txt&#39;,mode=&#39;w&#39;)             file_handle.write(jieMi_with(words2, num2))             file_handle.close()             print(&quot;情报原文已保存在文档中&quot;)         print(&quot;数据解密结果为:&quot;)         print(jieMi_with(words2, num2))     elif (x == 3):             print(&quot;选择待解密信息来源：&quot;)         print(&quot;1.终端输入&quot;)         print(&quot;2.文本读入&quot;)         y = int(input(&quot;你想选择的功能是：&quot;))         if(y == 1):             words3 = input(&quot;请输入待解密字符串：&quot;)         else:             with open(&#39;情报密文.txt&#39;) as file_obj:                 words3 = file_obj.read()                 print(words3)                 file_obj.close()         if (y == 2):             file_handle=open(&#39;情报原文.txt&#39;,mode=&#39;w&#39;)             file_handle.write(jieMi_without(words3))             file_handle.close()             print(&quot;情报原文已保存在文档中&quot;)         print(&quot;数据解密结果为:&quot;)         print(jieMi_without(words3))     elif (x == 4):         exit(0)     else:         print(&quot;请输入正确的指令! 下次再见!&quot;)         exit(0)</code></p>\n","categories":["编程语言"],"tags":["编程语言","python"]},{"title":"如何快速掌握一门编程语言","url":"http://example.com/2020/12/20/如何快速掌握一门编程语言/","content":"<h1 id=\"当前企业程序员必备语言三剑客\"><a href=\"#当前企业程序员必备语言三剑客\" class=\"headerlink\" title=\"当前企业程序员必备语言三剑客\"></a>当前企业程序员必备语言三剑客</h1><p>python<br>node.js<br>[java]</p>\n<h1 id=\"职场要求\"><a href=\"#职场要求\" class=\"headerlink\" title=\"职场要求\"></a>职场要求</h1><p><strong>最快的时间</strong>掌握一门语言</p>\n<h1 id=\"基本概念术语\"><a href=\"#基本概念术语\" class=\"headerlink\" title=\"基本概念术语\"></a>基本概念术语</h1><p><strong>图灵完备</strong>的编程语言可以解决计算机能解决的问题<br>是语言但是不是编程语言 e.g.html markdown 了解每个标记的语义<br>图灵完备：输入输出有逻辑 +能对数据存取<br>图灵完备的语言可以相互替代</p>\n<h1 id=\"如何快速掌握一门编程语言\"><a href=\"#如何快速掌握一门编程语言\" class=\"headerlink\" title=\"如何快速掌握一门编程语言\"></a>如何快速掌握一门编程语言</h1><h2 id=\"成为coder\"><a href=\"#成为coder\" class=\"headerlink\" title=\"成为coder\"></a>成为coder</h2><h3 id=\"1-对要学习的语言进行分类，怎么学（共性）\"><a href=\"#1-对要学习的语言进行分类，怎么学（共性）\" class=\"headerlink\" title=\"1.对要学习的语言进行分类，怎么学（共性）\"></a>1.对要学习的语言进行分类，怎么学（共性）</h3><p>语言的历史，为什么会有这门语言（之前的东西不方便）<br>不同语言有它方便的地方<br>java强规范 团队协作/ 用框架不了解原理 错误不好定位 /反人类 完善的项目去重构很好 但是创业公司开始很多变化就不用<br>-&gt; 历史特点 开发环境 搭建环境 这个语言能干嘛(1)在github上搜开源项目都是什么类型的(2)文章博客 [2-3h]<br>-&gt; 遇到很新的语言 少中文资料 (1)查作者过往的经历</p>\n<h3 id=\"2-快速学习\"><a href=\"#2-快速学习\" class=\"headerlink\" title=\"2.快速学习\"></a>2.快速学习</h3><p>-&gt; 程序逻辑切入[2h]<br>e.g.变量 循环（知道有好几种，能看懂别人的，但是自己熟练掌握一种） 分支（if else）时间日期(支持计算吗什么格式保存什么时区有时间戳吗) 字符串(c 字符数组定长 C++ 字符串堆栈 java 可变字符串不可变字符串) 正则表达式</p>\n<h3 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3.变量\"></a>3.变量</h3><p>对语言进行以下这三种分类<br>(1.程序员)<br>静态类型e.g.C float a 强制类型转化  | 动态类型不用去声明它的类型<br>(2.编程语言环境)<br>强类型语言e.g.java 弱类型语言e.g.C(编程语言本身自己能否判断变量类型)<br>强类型语言不容易出错<br>(3.变量)<a href=\"https://www.cnblogs.com/bobo-site/p/9306049.html\"></a><br>变量类型<br>=基本类型 封装类型(java里这么叫)<br>直类型 e.g.C C++<br>引用类型 指针 e.g. python JS<br>e.g. java both</p>\n<h2 id=\"project级别\"><a href=\"#project级别\" class=\"headerlink\" title=\"project级别\"></a>project级别</h2><h3 id=\"4-容器类型\"><a href=\"#4-容器类型\" class=\"headerlink\" title=\"4.容器类型\"></a>4.容器类型</h3><p>编程语言中有 or 第三方库<br>容器复制(深浅)<br>容器序列化反序列化<br>容器基本操作(增删改)</p>\n<h2 id=\"进阶developer\"><a href=\"#进阶developer\" class=\"headerlink\" title=\"进阶developer\"></a>进阶developer</h2><h3 id=\"5-对象-抽象方法-函数-类-接口\"><a href=\"#5-对象-抽象方法-函数-类-接口\" class=\"headerlink\" title=\"5.对象/抽象方法/函数/类/接口\"></a>5.对象/抽象方法/函数/类/接口</h3><p>怎么定义</p>\n<h3 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6.函数\"></a>6.函数</h3><p>是否有接口是否有抽象类<br>e.g.代理模式？写一些demo</p>\n<h3 id=\"7-编程语言的生态-依赖\"><a href=\"#7-编程语言的生态-依赖\" class=\"headerlink\" title=\"7.编程语言的生态 依赖\"></a>7.编程语言的生态 依赖</h3><p>第三方包管理工具 依赖管理</p>\n<h3 id=\"8-熟练度\"><a href=\"#8-熟练度\" class=\"headerlink\" title=\"8.熟练度\"></a>8.熟练度</h3><h2 id=\"成为professional的\"><a href=\"#成为professional的\" class=\"headerlink\" title=\"成为professional的\"></a>成为professional的</h2><h3 id=\"9-高级特性-专业知识\"><a href=\"#9-高级特性-专业知识\" class=\"headerlink\" title=\"9.高级特性+专业知识\"></a>9.高级特性+专业知识</h3><p>e.g.网络支持 是否携程 数据库</p>\n","categories":["编程语言"],"tags":["编程语言"]},{"title":"category","url":"http://example.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://example.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://example.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://example.com/about/index.html","content":"","categories":[],"tags":[]}]